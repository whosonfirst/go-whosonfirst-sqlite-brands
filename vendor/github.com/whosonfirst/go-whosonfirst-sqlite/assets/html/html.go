// Code generated by go-bindata.
// sources:
// templates/html/inventory.html
// DO NOT EDIT!

package html

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesHtmlInventoryHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x56\xef\x6f\xe4\x34\x10\xfd\x7c\xfb\x57\x0c\xa1\x12\x20\x5d\x92\xbb\xa2\x2b\x74\x2f\x89\x84\xca\x55\x54\x3a\x38\xa0\xad\x80\x8f\x93\x78\x92\x0c\x38\x76\x6a\x7b\x77\x6f\x1b\xed\xff\x8e\xec\x24\xdd\xdd\xb6\xc7\x8f\x2f\xdd\x8c\xfd\xe6\xcd\xf8\x79\x9e\xd5\xec\xb3\xef\x3f\x5c\xdc\xfc\xf1\xf3\x3b\x68\x5d\x27\x8b\x45\xe6\x7f\x40\xa2\x6a\xf2\x88\x54\x54\x2c\x00\xb2\x96\x50\x14\x8b\x17\x00\x99\x63\x27\xa9\xf8\xad\xd5\x5f\x58\xf8\xa0\xe0\x92\x8d\x75\x70\xfd\xcb\x7b\x76\x04\x57\x6a\x4d\xca\x69\xb3\xcd\xd2\x11\x16\x32\x3a\x72\x08\xad\x73\x7d\x4c\x77\x2b\x5e\xe7\xd1\x85\x56\x8e\x94\x8b\x6f\xb6\x3d\x45\x50\x8d\x51\x1e\x39\xfa\xe8\x52\x5f\xfb\x2d\x54\x2d\x1a\x4b\x2e\xbf\xbd\xb9\x8c\xbf\x8d\x0e\x68\x14\x76\x94\x47\x86\x6a\x32\x86\xcc\x41\xb2\x36\xdc\xb0\x8a\x3e\x51\xf1\xf7\xf8\xf6\xbb\xf8\x42\x77\x3d\x3a\x2e\xe5\x61\xd1\xab\x77\xf9\x79\x04\xe9\x93\x12\xd8\xf7\x92\xe2\x4e\x97\x2c\x29\xde\x50\x19\x63\xdf\xc7\x15\xf6\x78\x9c\xbe\x25\xfb\x9f\xb3\xad\x43\xb7\xb2\x71\x89\x26\xb6\x6e\x7b\x44\x53\x4a\xac\xfe\x7a\x8e\xe8\x07\x54\xa2\x25\x29\x2e\x0d\x93\x12\x72\x7b\x28\x97\x59\xd1\x73\x29\x6b\xa6\x4d\xaf\x8d\x3b\x80\x6e\x58\xb8\x36\x17\xb4\xe6\x8a\xe2\x10\xbc\x04\x56\xec\x18\x65\x6c\x2b\x94\x94\xbf\x7e\x09\x1d\x7e\xe4\x6e\xd5\x1d\x2c\xb0\x3a\x5e\x58\x59\x32\x21\xf2\x22\xe4\x4a\x3f\x54\x0f\xc7\x01\xb7\xed\x69\xba\xc5\xca\xda\xf1\x2a\x00\x4a\x2d\xb6\x30\x8c\xdf\xb5\x56\x2e\xae\xb1\x63\xb9\x5d\x82\x45\x65\x63\x4b\x86\xeb\xb7\xe3\xae\x64\x45\x71\x4b\xdc\xb4\x6e\x09\xaf\x93\xaf\xa9\x9b\x36\x76\x8b\x19\x30\x13\x75\x68\x1a\x56\x71\xa9\x9d\xd3\x9d\x07\xbf\x39\x00\x87\x9f\xf1\x6f\xa5\x05\xcd\x39\x2f\x42\xf5\xcd\xc4\xff\xcd\xab\x57\x53\xc2\x8b\x4a\x4b\x6d\x96\xf0\xf9\xf9\xf9\xf9\xa3\x82\x89\x20\x87\x2c\xed\xa3\xb2\x4e\xf7\x4b\x38\x2a\x39\xc1\x6d\x8b\xa7\x6f\xce\x66\xf4\xcc\x7b\x76\x76\x76\xd8\x5b\x96\x06\xb9\x82\xad\xd2\xd1\x57\x00\x99\x97\xa9\x58\x2c\x3c\x2a\x6b\x4f\xff\xdd\x5f\xed\xe9\x8c\xee\x8b\x9b\x96\x2d\xd4\x2c\x09\x36\x68\x21\x43\x68\x0d\xd5\x79\xe4\x0d\x60\x97\x69\xda\xb0\x6b\x57\x65\x52\xe9\x2e\xdd\xb4\xda\x6a\x55\x7b\xce\xb4\xd1\xf1\x41\x18\xdb\x3b\xc9\x8e\xd2\x52\xea\x32\xed\xd0\x3a\x32\x69\xd5\x89\x74\xa3\xeb\x69\x2b\xe6\xb9\x7a\xd2\xe8\xa8\x68\x48\x91\x41\x47\x02\xca\x2d\x18\x5d\x6a\x67\xb3\x14\x0b\xd0\x0a\xb2\x20\x7b\x25\xd1\xda\x3c\x12\xe8\x28\x2a\x86\x01\x92\xf7\x68\xdd\x8f\x5a\x70\xcd\x24\x60\xb7\xcb\x52\x0f\x2b\x12\xb8\x69\xc9\x10\xb0\x05\x94\x56\x03\x42\x87\x55\xeb\x47\xc1\x10\x0a\x3f\x69\xb0\x26\x63\x59\x2b\xc0\x35\x72\x98\x3d\x40\xb7\x3f\xe6\xbe\xad\x3f\xad\x56\x51\x71\x1c\xfb\x9e\x92\x2c\xed\x67\xb5\x56\xb2\x08\x1f\xc3\x00\x06\x55\x43\x70\xc2\x2f\xe1\xc4\xc0\x32\x87\xe4\x57\xf2\xbe\xb1\xb0\xdb\x4d\xe0\xd9\x52\xc3\x00\x27\x26\xf9\x09\x3b\x82\xdd\x2e\x2a\x3c\xe7\x08\x90\x0c\x2c\x9e\xec\x87\xbd\x60\x0b\xa3\x55\x53\x3c\x74\x7a\x04\x4b\xca\xfb\xd3\xa0\xcb\x7e\xc9\xf3\xfa\xe9\x08\x59\x90\xd9\x0e\xa5\x9c\x65\x1c\x47\x6b\x4e\xb8\x0e\x91\x7f\xd0\x0c\x59\x3b\xc9\x19\xf0\x45\x56\x1a\x6f\xcb\xa9\x05\xc1\xeb\x87\x8b\x18\x67\xd9\xfb\x72\x18\x80\x6b\xa0\x3b\x4f\x75\xa1\x57\xca\xc1\x6b\xd8\xed\xc2\x18\x09\x74\x58\xa2\xa5\xf0\x78\x20\x2b\x7b\x7c\x9b\x95\x47\x47\x85\x56\x34\x5d\x1f\x3c\x9a\x54\x43\x95\x36\x62\x18\x80\xa4\xa5\xff\x47\x3a\x1e\x2d\xf4\x73\xed\x0c\xab\x66\x3f\x24\xcf\x57\xb1\xbe\x8c\xf2\x87\x07\x54\xc2\x4f\xd0\x11\xad\xe5\x7b\x7a\x10\x8c\xef\x69\x2f\xd7\x13\xfa\x6a\xaf\xa4\x67\xfa\x47\x9a\x27\xc9\x2b\xb5\x4f\x4f\x8e\xe4\xbf\x72\xc1\x91\x95\xa1\x60\x94\xe7\x7d\x71\x62\x8e\x9c\xf1\x84\xde\x37\xf4\xa5\x6b\x29\xa8\x08\xec\x2c\xc9\xfa\xab\xc0\x2b\xd1\x3a\x58\xf5\x22\x90\x7f\xd2\x77\x13\xff\x6d\xc0\x3d\x66\x4f\xe6\x41\x49\x05\xaf\xa7\xa1\x4e\x25\x3f\x78\x64\x94\x77\x5a\xf7\xde\x09\xaf\xd6\xf8\x58\x65\xe9\xf8\xff\xc2\xdf\x01\x00\x00\xff\xff\xb8\x46\x1c\xa0\x40\x08\x00\x00")

func templatesHtmlInventoryHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlInventoryHtml,
		"templates/html/inventory.html",
	)
}

func templatesHtmlInventoryHtml() (*asset, error) {
	bytes, err := templatesHtmlInventoryHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/inventory.html", size: 2112, mode: os.FileMode(420), modTime: time.Unix(1513876406, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/html/inventory.html": templatesHtmlInventoryHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"html": &bintree{nil, map[string]*bintree{
			"inventory.html": &bintree{templatesHtmlInventoryHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

